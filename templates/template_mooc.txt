**MySQL 8.0 Database Admin Instructions**

These instructions are crucial for maintaining data integrity and ensuring accurate query results. Violating these rules will lead to significant issues.

1.  **String Matching Requirements:**
    *   **Employee Names:** ALWAYS use `(T1.name LIKE '%value%')`.
    *   **Departments:** ALWAYS use `(T1.department LIKE '%value%' OR T1.subdepartment LIKE '%value%')`.
    *   **Project/Team Names:** ALWAYS check both project and team names when searching project-related information: `(T1.name LIKE '%value%' OR T2.name LIKE '%value%')`.
    *   **Project UUID:** For all project-related queries, ALWAYS check both `T1.uuid` and `EXISTS (SELECT 1 FROM team T2 WHERE T2.uuid = T1.team_id AND T2.name LIKE '%value%')`.
    *   **Never** use exact string matches (`=`) for text fields unless explicitly specified in the hints.

2.  **Join Requirements:**
    *   Use proper table aliases (T1, T2, T3, etc.).
    *   Join `teams` and `projects` correctly via `team_id`.
    *   For employee performance, use a `LEFT JOIN` between `work_hour` and `projects`.
    *   Handle `NULL` values in optional relationships appropriately.

3.  **Date Handling:**
    *   Use `DATE_FORMAT` for date standardization (e.g., `DATE_FORMAT(date_column, '%Y-%m-%d')`).
    *   Handle multiple date formats consistently.
    *   Consider `NULL` dates in calculations.
    *   Filter from `start_date` in `work_hour` unless otherwise specified.
    *   For "last week" queries: Calculate based on the most recent completed Monday-to-Sunday period.

4.  **Aggregation Rules:**
    *   For project revenue, handle `NULL` revenue values (e.g., using `COALESCE(revenue, 0)`).
    *   Group by the appropriate level (team, department, client).
    *   When querying subdepartments, ALWAYS group by both `department` and `subdepartment`.
    *   For average work hours:
        *   First, `SUM` all entries per employee.
        *   Then, calculate the average across employees.
        *   Never calculate averages directly from `work_hour` entries.

5.  **Performance Optimization:**
    *   Use `INNER JOIN` when a relationship must exist.
    *   Use `LEFT JOIN` for optional relationships.
    *   Add `IS NOT NULL` checks for critical calculations.

6.  **Employee Context Handling:**
    *   Only include `employee_id` conditions when the query specifically requires personal data.
    *   For personal queries (my tasks, my hours), include `employee_id` filters.
    *   For general queries (team stats, client analysis), omit `employee_id` even if provided.
    *   Never add `employee_id` conditions unless explicitly needed for personal data access.

7.  **Labor Cost Calculations:**

Function Usage: ALWAYS use CalculateLaborCost(start_date, end_date, project_id, employee_id) for labor costs
Date Range Rules:

Use COALESCE with project dates and work hours
For project dates: COALESCE(MIN(w.start_date), p.sign_date) as start
For end dates: COALESCE(MAX(w.end_date), p.expected_completion_date) as end
Function automatically handles partial month calculations
Full months calculated for complete calendar months between dates


ID Requirements:

Both project_id and employee_id must be valid UUIDs
Use DISTINCT when joining work_hour to avoid duplicate counting
Employee must have work hours recorded for the period
Project must exist in project table


Common Table Expression (CTE) Usage:

First CTE should calculate effective date ranges
Second CTE should handle labor cost calculations
Always use subquery with DISTINCT for employee-project combinations
Join back to main tables for final selection


Output Requirements:

Include project and team names for context
Labor cost will be calculated in the project's currency
Group results appropriately (by project, team, or both)


    *   Use the following built-in function to calculate labor cost, as shown below:
        ```sql
        CalculateLaborCost(
            start_date DATE,
            end_date DATE,
            project_id CHAR(36),
            employee_id CHAR(36)
        )
        ```
        I have a in built mysql 8.0 function
DELIMITER $$
CREATE FUNCTION CalculateLaborCost(
	start_date DATE,
	end_date DATE,
	project_id CHAR(36),
	employee_id CHAR(36)
)
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
	DECLARE total_hours_on_project DECIMAL(10, 2);
	DECLARE total_hours_employee DECIMAL(10, 2);
	DECLARE employee_salary DECIMAL(10, 2);
	DECLARE partial_month_start DECIMAL(10, 5);
	DECLARE partial_month_end DECIMAL(10, 5);
	DECLARE full_months INT;
	DECLARE number_of_months DECIMAL(10, 5);
	DECLARE labor_cost DECIMAL(10, 2);

	-- Calculate total hours worked by the employee on the specific project
	SELECT SUM(hour)
	INTO total_hours_on_project
	FROM work_hour
	WHERE work_hour.employee_id = employee_id
  	AND work_hour.project_id = project_id
  	AND work_hour.start_date BETWEEN start_date AND end_date;

	-- Calculate total hours worked by the employee across all projects
	SELECT SUM(hour)
	INTO total_hours_employee
	FROM work_hour
	WHERE work_hour.employee_id = employee_id
  	AND work_hour.start_date BETWEEN start_date AND end_date;

	-- Get the employee's salary
	SELECT salary
	INTO employee_salary
	FROM employee
	WHERE uuid = employee_id;

	-- Calculate partial months
	-- Partial month for start_date
	SELECT COUNT(distinct work_hour.start_date) / 4.35
	INTO partial_month_start
	FROM work_hour
	WHERE work_hour.employee_id = employee_id
  	AND work_hour.start_date BETWEEN start_date AND LAST_DAY(start_date);

	-- Partial month for end_date
	SELECT COUNT(distinct work_hour.start_date) / 4.35
	INTO partial_month_end
	FROM work_hour
	WHERE work_hour.employee_id = employee_id
  	AND work_hour.start_date BETWEEN DATE_FORMAT(end_date, '%Y-%m-01') AND end_date;

	-- Calculate full months in between start_date and end_date
	SELECT TIMESTAMPDIFF(MONTH, LAST_DAY(start_date) + INTERVAL 1 DAY, DATE_FORMAT(end_date, '%Y-%m-01') - INTERVAL 1 DAY)
	INTO full_months;

	-- Calculate the total number of months
	SET number_of_months = full_months + partial_month_start + partial_month_end;

	-- Calculate the labor cost
	SET labor_cost = (employee_salary / total_hours_employee) * total_hours_on_project * number_of_months;

	RETURN labor_cost;
END $$
DELIMITER ;

8.  **Last Week Date Handling:**
    *   For queries involving "last week," determine week boundaries based on Monday-to-Sunday periods.
    *   Base calculations on the most recently completed Monday-to-Sunday period.
    *   Use `DATE_FORMAT` and date functions for consistent date handling.

**Key Differences from SQLite Instructions:**

*   **`STRFTIME` replaced with `DATE_FORMAT`:** MySQL uses `DATE_FORMAT` for date formatting, not `STRFTIME`.
*   **Date Functions:** MySQL has its own set of date functions (e.g., `DATE_SUB`, `CURDATE()`, `DAYOFWEEK()`) that should be used instead of SQLite-specific functions.
*   **String Matching:** The `LIKE` operator works the same way, but the specific syntax for string matching remains consistent.
*   **`COALESCE` for NULL Handling:** MySQL uses `COALESCE` to handle `NULL` values, which is equivalent to `IFNULL` in SQLite.

**Example of Last Week Calculation (MySQL):**

```sql
-- Calculate the start date of the last completed week (Monday)
SET @last_monday = DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) + 6) % 7 DAY);

-- Calculate the end date of the last completed week (Sunday)
SET @last_sunday = DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) - 1) % 7 DAY);

-- Example query using the calculated dates
SELECT *
FROM work_hour
WHERE start_date >= @last_monday AND start_date <= @last_sunday;
```

**Important Notes:**

*   These instructions are designed to be comprehensive and prevent common errors.
*   Always double-check your queries against these rules before execution.
*   Pay close attention to the specific requirements of each query and adapt the instructions accordingly.

By adhering to these MySQL-specific guidelines, you will ensure the accuracy, consistency, and performance of your database queries. Let me know if you have any further questions.


<database_schema>
Database Schema and Description

This document describes the schema of a database, including tables, columns, data types, constraints, sample values, and relationships.


3. Client Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: 017143b5-285c-4a62-8ab0-bee690e6ac69, 0450995e-c275-4d2e-99c0-40e6803d2bc4, 0a8f3c0e-616a-444a-902c-23474c91124d, 0ade53ce-c9af-4c52-a3a6-8fac9f420bc4, 0b5796fe-9d8b-4f13-945f-4440cd82bd5f

  name (varchar(255), NOT NULL): 

Sample Values: Anderson Ltd, Frazier, Lambert and Hernandez, Hunt, Novak and Gibson, Murray-Hobbs, Wagner, Dunn and Chan

  source (varchar(255), ): 

Sample Values: Zang Hongfang, Old client, Old client, New customer, New customer

  company (varchar(255), ): 

Sample Values: 383 Alvarez Fork Apt. 494, Changbury, NE 85667, 27985 Ricky Station, Lake Christopher, AK 76461, 86942 Thomas River Apt. 594, Bakermouth, MT 44525, USCGC Lucero, FPO AA 59364, 655 Hernandez Roads Apt. 052, Lake Brookeville, MN 31943

  contact (varchar(255), ): 

Sample Values: (674)264-0255, 382.147.8995, 516.796.8319x6779, 354.987.1676x84560, 499.151.9613

  background (text, ): 

Sample Values: foreign investment, State -owned enterprise, World Top 500, Private enterprise, Media company

  description (text, ): 

Sample Values: Old client, Old customer secondary operation, Old client, , 


38. Employee Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 6d642ac1-a6f0-11ef-b88d-30c9abb7563e, 6d646397-a6f0-11ef-b88d-30c9abb7563e, 6d648745-a6f0-11ef-b88d-30c9abb7563e, 6d64aa1b-a6f0-11ef-b88d-30c9abb7563e

  name (varchar(255), NOT NULL): 

Sample Values: Juan, Shelby, Christine, Patrick, Kyle

  department (varchar(255), ): 

Sample Values: Comprehensive Management Department, Comprehensive Management Department, Comprehensive Management Department, Comprehensive Management Department, Comprehensive Management Department

  alias (varchar(255), ): 

Sample Values: 0.0, 0.0, 0.0, 0.0, 0.0

  position (text, ): 

Sample Values: Financial Engineer, Cashier, HRBP, Employee relationship, Strategic director

  subdepartment (varchar(255), ): 

Sample Values: Internal trial team, Financial Management Center, Human Resources Center, Human Resources Center, 

  salary (int, Default: 20000): 

Sample Values: 20000, 20000, 20000, 20000, 20000



88. Project Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: 064b75a3-54c1-4695-90ea-065f0697bb2a, 14986566-4b20-47f7-8415-479648bcf105, 179de3d0-bbc9-4cda-8124-03e225ecff69, 2d6d2ffb-673a-42d9-92d1-0b3a8dd69d4a, 2f63c5b9-324d-4bd0-b3e2-86a2655c3c9f

  name (varchar(255), NOT NULL): 

Sample Values: Adams-Ali, Adams-Wells, Adkins Group, Allen-Leon, Allen, Smith and Bell

  team_id (char(36), ): 

Sample Values: 

  address (text, ): 

Sample Values: , , , , 

  type (varchar(100), ): 

Sample Values: , , , , 

  area (float, ): 

Sample Values: 0.0, 0.0, 0.0, 0.0, 0.0

  sign_date (date, ): 

Sample Values: 

  expected_completion_date (date, ): 

Sample Values: 

  revenue (decimal(15,2), ): 

Sample Values: 0.00, 0.00, 0.00, 0.00, 0.00

  revenue_note (text, ): 

Sample Values: 

  client_id (char(36), ): 

Sample Values: 

Foreign Keys:
  client_id referencing client.uuid
  team_id referencing team.uuid




213. Team Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: 99becc59-4471-40ef-813b-62c6c337af2e, eae72458-b312-11ef-b06b-00155da51a45, d7b18f6c-e11b-4ddf-abb8-dbf721be254d, eae6bf5b-b312-11ef-b06b-00155da51a45, 4d514de0-4caf-4a46-b5e5-5d7a6802d55a

  name (varchar(255), ): 

Sample Values: (Need number) Innovation Center 15#Fuzhou Changle Digital Town CDS Industrial Connection, (Need number) Nanjing Yizhuan Building Block B 307-309 Huawei new venue, (Need number) Pakistan's communication room, (Need numbers) Hongsheng 20th floor, (Need numbers) I hope to learn the design of the national workplace year frame

  description (text, ): 

Sample Values: 


232. Team_assignment Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: abe76d8c-bb85-11ef-9e20-30c9abb7563e, a8714c4f-bb85-11ef-9e20-30c9abb7563e, a8ec8770-bb85-11ef-9e20-30c9abb7563e, a8dbbd8f-bb85-11ef-9e20-30c9abb7563e, abdb25ce-bb85-11ef-9e20-30c9abb7563e

  team_id (char(36), ): 

Sample Values: 1474c1b0-831e-4ef7-8f9c-ffc9e66c8b22, 16060838-3299-4487-bf49-9b5ed27b8d18, 23a335c8-a1d3-439a-8bb6-d70cd82abb22, 40bb570e-ed7f-4f1f-8674-beeeae4fa24a, 4325f609-a865-11ef-b88d-30c9abb7563e

  employee_id (char(36), ): 

Sample Values: 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 6d642ac1-a6f0-11ef-b88d-30c9abb7563e, 6d646397-a6f0-11ef-b88d-30c9abb7563e, 6d648745-a6f0-11ef-b88d-30c9abb7563e, 6d64aa1b-a6f0-11ef-b88d-30c9abb7563e

Foreign Keys:
  team_id referencing team.uuid
  employee_id referencing employee.uuid




285. Work_hour Table

Description: No description available.

Columns:

  uuid (char(36), Primary Key, NOT NULL): 

Sample Values: 0839f42b-7253-47c8-8eeb-efd1a91fe283, 33dfdde9-adf4-4826-bba9-4dd3da80ca4c, 61aa1b2b-5c17-4982-8850-e03e360190f3, 6c0ca8d0-813d-409f-975f-c6f5ed48627c, e1182b8e-bbfd-46b3-b369-984bcd0e81c1

  is_reversed (tinyint(1), Default: 0): 

Sample Values: 0, 0, 0, 0, 0

  task_description (text, ): 

Sample Values: Plane scheme, concept plan, 施工图深化, WTL技术支持, Project bidding stage 1. Two parts bid quotes are organized, including internal communication, 施工配合

  stage (text, ): 

Sample Values: 2. Design stage, , , 1. Bidding stage, 4. The completion stage

  is_standardized (tinyint(1), Default: 1): 

Sample Values: 1, 1, 1, 1, 1

  project_id (char(36), ): 

Sample Values: 015c3f2a-c7f6-42f3-b5c8-a88e8288948c, 064b75a3-54c1-4695-90ea-065f0697bb2a, 064b75a3-54c1-4695-90ea-065f0697bb2a, 064b75a3-54c1-4695-90ea-065f0697bb2a, 064b75a3-54c1-4695-90ea-065f0697bb2a

  employee_id (char(36), ): 

Sample Values: 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 0ac49b75-a8b3-11ef-b88d-30c9abb7563e, 0ac49b75-a8b3-11ef-b88d-30c9abb7563e

  hour (decimal(10,2), ): 

Sample Values: 21.33, 4.67, 3.50, 4.00, 5.00

  start_date (date, ): 

Sample Values: 2024-11-11, 2024-08-19, 2024-08-05, 2024-09-16, 2024-10-07

  end_date (date, ): 

Sample Values: 2024-11-17, 2024-08-25, 2024-08-11, 2024-09-22, 2024-10-13

Foreign Keys:
  project_id referencing project.uuid
  employee_id referencing employee.uuid

Relationships:

project table has a foreign key client_id referencing client.uuid.
project table has a foreign key team_id referencing team.uuid.
team_assignment table has a foreign key team_id referencing team.uuid.
team_assignment table has a foreign key employee_id referencing employee.uuid.
users table has a foreign key employee_id referencing employee.uuid.
work_hour table has a foreign key project_id referencing project.uuid.
work_hour table has a foreign key employee_id referencing employee.uuid.

Notes:

The uuid columns are used as primary keys in most tables, ensuring unique identification of records.

This document provides a comprehensive overview of the database schema, sample data, and relationships. Please let me know if you have any further questions or require additional details.
</database_schema>


 
======= Example 1: Employee'sLabor Cost Calculation =======
**************************
【Question】
Calculate Lina's labor cost for the "宣传销" project

**************************
【Answer】
Repeating the question and evidence, and generating the SQL with Recursive Divide-and-Conquer.

**1. Divide and Conquer:**

* **Main Question:** Calculate labor cost for Lina on 宣传销 project
    * **Analysis:** Need to get date ranges and use CalculateLaborCost function
    * **Pseudo SQL:** WITH date_cte AS (get_date_ranges) SELECT employee_info, CalculateLaborCost(dates, ids)

    * **Sub-question 1:** Get project date ranges
        * **Analysis:** Need min/max dates per employee-project combination
        * **Pseudo SQL:** SELECT MIN(start_date), MAX(end_date) FROM work_hour GROUP BY project_id, employee_id

    * **Sub-question 2:** Match employee and project names
        * **Analysis:** Must handle both Chinese and English variations for employee
        * **Pseudo SQL:** (name LIKE '%Lina%') AND (project.name LIKE '%宣传销%')

**2. Assembling SQL:**

**Final Optimized SQL Query:**

<FINAL_ANSWER>
WITH project_dates AS (
    SELECT 
        MIN(start_date) AS min_date,
        MAX(end_date) AS max_date,
        project_id,
        employee_id
    FROM work_hour T1
    INNER JOIN employee T2 ON T1.employee_id = T2.uuid
    INNER JOIN project T3 ON T1.project_id = T3.uuid
    WHERE 
        (T2.name LIKE '%Lina%')
        AND (T3.name LIKE '%宣传销%')
    GROUP BY project_id, employee_id
)
SELECT 
    T1.name AS employee_name,
    T1.alias,
    T2.name AS project_name,
    CalculateLaborCost(
        pd.min_date,
        pd.max_date,
        pd.project_id,
        pd.employee_id
    ) AS labor_cost
FROM employee T1
INNER JOIN project T2 ON T2.name LIKE '%宣传销%'
INNER JOIN project_dates pd ON pd.employee_id = T1.uuid
WHERE 
    (T1.name LIKE '%Lina%')
</FINAL_ANSWER>

======= Example 3: Project Labor Cost Calculation =======
**************************
【Question】
Find the project with the highest labor cost and its associated team.

**************************
【Answer】
Repeating the question and evidence, and generating the SQL with Recursive Divide-and-Conquer.

**1. Divide and Conquer:**

* **Main Question:** Find project with highest total labor cost
    * **Analysis:** Need to calculate labor costs for all projects and find maximum
    * **Pseudo SQL:** WITH dates_cte, costs_cte SELECT MAX(total_cost)

    * **Sub-question 1:** Get effective project dates
        * **Analysis:** Need to handle both work hours and project dates
        * **Pseudo SQL:** SELECT COALESCE(MIN(start_date), sign_date), COALESCE(MAX(end_date), expected_completion_date)

    * **Sub-question 2:** Calculate total labor cost per project
        * **Analysis:** Must avoid duplicate employee counting
        * **Pseudo SQL:** SELECT DISTINCT employee_id, SUM(labor_cost) GROUP BY project

**2. Assembling SQL:**

**Final Optimized SQL Query:**

<FINAL_ANSWER>
WITH project_dates AS (
    SELECT 
        p.uuid AS project_id,
        p.name AS project_name,
        t.name AS team_name,
        COALESCE(MIN(w.start_date), p.sign_date) AS effective_start_date,
        COALESCE(MAX(w.end_date), p.expected_completion_date) AS effective_end_date
    FROM project p
    LEFT JOIN team t ON p.team_id = t.uuid
    LEFT JOIN work_hour w ON p.uuid = w.project_id
    GROUP BY p.uuid, p.name, t.name
), project_labor_costs AS (
    SELECT 
        pd.project_id,
        pd.project_name,
        pd.team_name,
        SUM(DISTINCT CalculateLaborCost(
            pd.effective_start_date,
            pd.effective_end_date,
            pd.project_id,
            w.employee_id
        )) AS total_labor_cost
    FROM project_dates pd
    INNER JOIN (
        SELECT DISTINCT project_id, employee_id 
        FROM work_hour
    ) w ON pd.project_id = w.project_id
    WHERE 
        pd.effective_start_date IS NOT NULL 
        AND pd.effective_end_date IS NOT NULL
    GROUP BY pd.project_id, pd.project_name, pd.team_name
)
SELECT 
    project_name,
    team_name,
    total_labor_cost
FROM project_labor_costs
WHERE total_labor_cost = (
    SELECT MAX(total_labor_cost)
    FROM project_labor_costs
)
ORDER BY total_labor_cost DESC
LIMIT 1;
</FINAL_ANSWER>

**************************
【Question】
Question: 
{QUESTION}



**************************
【Answer】
Repeating the question and generating the SQL with Recursive Divide-and-Conquer and No comments.